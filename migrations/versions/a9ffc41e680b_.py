"""empty message

Revision ID: a9ffc41e680b
Revises: None
Create Date: 2020-09-23 19:52:32.493484

"""

# revision identifiers, used by Alembic.
revision = 'a9ffc41e680b'
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('GPS')
    op.drop_table('magnetic')
    op.drop_table('marks')
    op.drop_table('locations')
    op.drop_table('content_images')
    op.drop_table('categories')
    op.drop_table('user_followings')
    op.drop_table('user_category_points')
    op.drop_table('contents')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contents',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('contents_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('text', sa.VARCHAR(length=1024), server_default=sa.text("''::character varying"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_category_points',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='user_category_points_category_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_category_points_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_category_points_pkey')
    )
    op.create_table('user_followings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('hunter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('marker_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['hunter_id'], ['users.id'], name='user_followings_hunter_id_fkey'),
    sa.ForeignKeyConstraint(['marker_id'], ['users.id'], name='user_followings_marker_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_followings_pkey')
    )
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    sa.UniqueConstraint('name', name='categories_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('content_images',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['content_id'], ['contents.id'], name='content_images_content_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='content_images_pkey')
    )
    op.create_table('locations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('locations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('GPS_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('magnetic_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['GPS_id'], ['GPS.id'], name='locations_GPS_id_fkey'),
    sa.ForeignKeyConstraint(['magnetic_id'], ['magnetic.id'], name='locations_magnetic_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='locations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='locations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('marks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='marks_category_id_fkey'),
    sa.ForeignKeyConstraint(['content_id'], ['contents.id'], name='marks_content_id_fkey'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name='marks_location_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='marks_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='marks_pkey')
    )
    op.create_table('magnetic',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('magnetic_X', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('magnetic_Y', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('magnetic_Z', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='magnetic_pkey')
    )
    op.create_table('GPS',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"GPS_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('GPS_X', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('GPS_Y', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='GPS_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('google_id', sa.VARCHAR(length=255), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('oauth_token', sa.VARCHAR(length=255), server_default=sa.text("''::character varying"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('google_id', name='users_google_id_key'),
    sa.UniqueConstraint('oauth_token', name='users_oauth_token_key'),
    sa.UniqueConstraint('username', name='users_username_key')
    )
    # ### end Alembic commands ###
